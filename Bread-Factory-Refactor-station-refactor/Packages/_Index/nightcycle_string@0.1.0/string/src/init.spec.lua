

return function ()
	
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local output = ReplicatedStorage:WaitForChild("Output")
	local printIndex = #output:GetChildren()
	local function out(...)
		printIndex += 1
		for i, str in ipairs({...}) do
			local folder = Instance.new("Folder", output)
			folder.Name = tostring(printIndex).."_"..tostring(i).."_"..tostring(str)
			if type(str) == "table" then
				for k, v in pairs(str) do
					local strVal = Instance.new("StringValue", folder)
					strVal.Name = tostring(k)
					strVal.Value = tostring(v)
				end
			end
		end
	end

	describe("String", function()
		local String = require(script.Parent)
		it("should boot", function()
			String = require(script.Parent)
			expect(String).to.be.ok()
		end)
		it("should eq", function()
			-- out("Start")
			local abc1 = String.list("ABC")
			local abc2 = String.list("ABC")
			-- out("ABC1", abc1)
			local abcd = String.list("ABCD")
			local isEq = String.eq(abc1, abc2)
			expect(isEq).to.equal(true)
			local isEq2 = String.eq(abc1, abcd)
			-- out("Eq 2", isEq2)
			expect(isEq2).to.equal(false)
		end)
		it("should len", function()
			local abc = String.list("ABC")
			local len = String.len(abc)
			-- out("Length", len)
			expect(len).to.equal(3)
		end)
		it("should sub", function()
			local abc = String.list("ABC")
			local b = String.sub(abc, 2, 2)
			local isEq = String.eq(b, String.list("B"))
			expect(isEq).to.equal(true)
		end)
		it("should copy", function()
			local jango = String.list("Jango")
			local boba = String.copy(jango)
			local isEq = String.eq(jango, boba)
			expect(isEq).to.equal(true)
			local isRawEq = jango == boba
			expect(isRawEq).to.equal(false)
		end)
		it("should find", function()
			local full = String.list("Where's my laptop")
			local pattern = String.list("laptop")
			local index = String.find(full, pattern)
			-- out("Index", index)
			local nIndex = String.find(full, String.list("pc"))
			-- out("nIndex", nIndex)
			expect(index).to.equal(12)
			expect(nIndex).to.equal(nil)
		end)
		it("should clean", function()
			local dirty = {nil, "A", "B", String.null(), "C"}
			local clean = String.list("ABC")

			local isEq = String.eq(String.clean(dirty), clean)
			expect(isEq).to.equal(true)
		end)
		it("should concat", function()
			local abc = String.list("ABC")
			local def = String.list("DEF")
			local abcdef = String.list("ABCDEF")
			local isEq = String.eq(String.concat(abc, def), abcdef)
			expect(isEq).to.equal(true)
		end)
		it("should split", function()
			-- out("L1")
			local abcdef = String.list("ABC,DEF,GHI")
			-- out("L1B")
			local list = String.split(abcdef, String.list(","))
			-- out("L2")
			local word1 = list[1]
			local word2 = list[2]
			local word3 = list[3]
			-- out("L3")
			local isEq1 = String.eq(word1, String.list("ABC"))
			local isEq2 = String.eq(word2, String.list("DEF"))
			local isEq3 = String.eq(word3, String.list("GHI"))
			-- out("L4", isEq1, isEq2, isEq3)
			expect(isEq1).to.equal(true)
			expect(isEq2).to.equal(true)
			expect(isEq3).to.equal(true)
		end)
		it("should gsub", function()
			local full = String.list("Where's my laptop")
			local pattern = String.list("laptop")
			local replacement = String.list("waste of money")
			local result1 = String.gsub(full, pattern, replacement)
			local isEq1 = String.eq(result1, String.list("Where's my waste of money"))
			-- out("IsEq1", isEq1)
			local full2 = String.list("pop pop goes the popcorn")
			local pattern2 = String.list("pop")
			local rep2 = String.list("poop")
			local result2 = String.gsub(full2, pattern2, rep2)
			local isEq2 = String.eq(result2, String.list("poop poop goes the poopcorn"))
			-- out("IsEq2", isEq2)
			expect(isEq1).to.equal(true)
			expect(isEq2).to.equal(true)
		end)
	end)
end